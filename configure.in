#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.64])
AC_INIT([dnscap],
	m4_esyscmd_s(echo $(git describe --tags)$(git status --porcelain | awk '{if ($1 == "M") {print "-dirty";exit}}')),
	[wessels@dns-oarc.net],
	[],
	[http://dnscap.dns-oarc.net/])
AC_CONFIG_SRCDIR([dnscap.c])
AC_CONFIG_HEADERS([config.h])
AC_CONFIG_AUX_DIR(cfgaux)

# Checks for programs.
AC_PROG_CC
AC_CANONICAL_HOST

# Checks for libraries.
AC_CHECK_LIB([bind], [ns_initparse], [], [AC_CHECK_LIB([bind], [__ns_initparse])])
AC_CHECK_LIB([resolv], [res_mkquery], [], [AC_CHECK_LIB([resolv], [__res_mkquery])])
AC_CHECK_LIB([pcap], [pcap_open_live], [],
	[
	echo "dnscap requires libpcap.  Install package libpcap-dev on most Linux"
	echo "systems.  You can also get the source from www.tcpdump.org."
	exit 1
	])
AC_CHECK_LIB([dl], [dlopen])


# HPUX
case "$host_os" in
hpux*)
	AC_CHECK_LIB([hplx], [main])
	;;
esac

# Solaris
case "$host_os" in
solaris*)
	AC_CHECK_LIB([rt], [main])
	AC_CHECK_LIB([md5], [main])
	AC_CHECK_LIB([socket], [main])
	AC_CHECK_LIB([nsl], [main])
	;;
esac

# Checks for header files.
AC_HEADER_RESOLV
AC_CHECK_HEADERS([arpa/inet.h fcntl.h netdb.h netinet/in.h stdlib.h string.h sys/ioctl.h sys/param.h sys/socket.h sys/time.h unistd.h])

# Checks for library functions.
AC_CHECK_FUNCS([snprintf])
AC_CHECK_FUNC([ns_initparse],
	[AC_DEFINE([HAVE_NS_INITPARSE], [1], [Define to 1 if you have the `ns_initparse' function.])],
	AC_CHECK_FUNC(__ns_initparse,
		[AC_DEFINE([HAVE_NS_INITPARSE], [1], [Define to 1 if you have the `ns_initparse' function.])]
	)
)
AC_CHECK_FUNC([ns_parserr],
	[AC_DEFINE([HAVE_NS_PARSERR], [1], [Define to 1 if you have the `ns_parserr' function.])],
	AC_CHECK_FUNC(__ns_parserr,
		[AC_DEFINE([HAVE_NS_PARSERR], [1], [Define to 1 if you have the `ns_parserr' function.])]
	)
)
AC_CHECK_FUNC([ns_sprintrr],
	[AC_DEFINE([HAVE_NS_SPRINTRR], [1], [Define to 1 if you have the `ns_sprintrr' function.])],
	AC_CHECK_FUNC(__ns_sprintrr,
		[AC_DEFINE([HAVE_NS_SPRINTRR], [1], [Define to 1 if you have the `ns_sprintrr' function.])]
	)
)
AC_CHECK_FUNC([ns_name_uncompress],
	[AC_DEFINE([HAVE_NS_NAME_UNCOMPRESS], [1], [Define to 1 if you have the `ns_name_uncompress' function.])],
	AC_CHECK_FUNC(__ns_name_uncompress,
		[AC_DEFINE([HAVE_NS_NAME_UNCOMPRESS], [1], [Define to 1 if you have the `ns_name_uncompress' function.])]
	)
)
AC_CHECK_FUNC([p_rcode],
	[AC_DEFINE([HAVE_P_RCODE], [1], [Define to 1 if you have the `p_rcode' function.])],
	AC_CHECK_FUNC(__p_rcode,
		[AC_DEFINE([HAVE_P_RCODE], [1], [Define to 1 if you have the `p_rcode' function.])]
	)
)
AC_CHECK_FUNCS([__assertion_failed])
AC_CHECK_FUNCS([setresgid setresuid setregid setreuid setegid seteuid])

if test "$GCC" = "yes" ; then
	CWARN="-Wall"
fi

AC_ARG_ENABLE(seccomp, AC_HELP_STRING([--enable-seccomp], [Linux seccomp-bpf sandbox]))
case "$enable_seccomp" in
        yes)
                AC_DEFINE_UNQUOTED([USE_SECCOMP], [1], [Define this to enable Linux seccomp-bpf sandbox.])
		SECCOMPFLAGS="-lseccomp -fPIE -fstack-protector-all -Wl,-z,relro -Wformat -Wformat-security -Werror=format-security -D_FORTIFY_SOURCE=2"
                ;;
        no|*)
                ;;
esac


OPTFLAGS=''
AC_SUBST(OPTFLAGS, ["$OPTFLAGS"])
AC_SUBST(CWARN, ["$CWARN"])
AC_SUBST(SECCOMPFLAGS, ["$SECCOMPFLAGS"])
AC_CONFIG_FILES([Makefile])
AC_OUTPUT
